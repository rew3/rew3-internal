// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.24.2
// source: service/grpc/proto/payload.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataTypeEnum int32

const (
	DataTypeEnum_EMPTY         DataTypeEnum = 0
	DataTypeEnum_BINARY        DataTypeEnum = 1
	DataTypeEnum_LIST          DataTypeEnum = 3
	DataTypeEnum_CUSTOM_LIST   DataTypeEnum = 4
	DataTypeEnum_SCALAR_LIST   DataTypeEnum = 5
	DataTypeEnum_OBJECT        DataTypeEnum = 6
	DataTypeEnum_CUSTOM_OBJECT DataTypeEnum = 7
	DataTypeEnum_SCALAR        DataTypeEnum = 8
)

// Enum value maps for DataTypeEnum.
var (
	DataTypeEnum_name = map[int32]string{
		0: "EMPTY",
		1: "BINARY",
		3: "LIST",
		4: "CUSTOM_LIST",
		5: "SCALAR_LIST",
		6: "OBJECT",
		7: "CUSTOM_OBJECT",
		8: "SCALAR",
	}
	DataTypeEnum_value = map[string]int32{
		"EMPTY":         0,
		"BINARY":        1,
		"LIST":          3,
		"CUSTOM_LIST":   4,
		"SCALAR_LIST":   5,
		"OBJECT":        6,
		"CUSTOM_OBJECT": 7,
		"SCALAR":        8,
	}
)

func (x DataTypeEnum) Enum() *DataTypeEnum {
	p := new(DataTypeEnum)
	*p = x
	return p
}

func (x DataTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_service_grpc_proto_payload_proto_enumTypes[0].Descriptor()
}

func (DataTypeEnum) Type() protoreflect.EnumType {
	return &file_service_grpc_proto_payload_proto_enumTypes[0]
}

func (x DataTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataTypeEnum.Descriptor instead.
func (DataTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_service_grpc_proto_payload_proto_rawDescGZIP(), []int{0}
}

type StatusTypeProto int32

const (
	StatusTypeProto_STATUS_TYPE_UNKNOWN   StatusTypeProto = 0
	StatusTypeProto_OK                    StatusTypeProto = 1
	StatusTypeProto_CREATED               StatusTypeProto = 2
	StatusTypeProto_DELETED               StatusTypeProto = 3
	StatusTypeProto_ACCEPTED              StatusTypeProto = 4
	StatusTypeProto_BAD_REQUEST           StatusTypeProto = 5
	StatusTypeProto_UNAUTHORIZED          StatusTypeProto = 6
	StatusTypeProto_FORBIDDEN             StatusTypeProto = 7
	StatusTypeProto_INTERNAL_SERVER_ERROR StatusTypeProto = 8
	StatusTypeProto_BAD_GATEWAY           StatusTypeProto = 9
	StatusTypeProto_SERVICE_UNAVAILABLE   StatusTypeProto = 10
	StatusTypeProto_GATEWAY_TIMEOUT       StatusTypeProto = 11
	StatusTypeProto_NOT_FOUND             StatusTypeProto = 12
	StatusTypeProto_INVALID_INPUT         StatusTypeProto = 13
)

// Enum value maps for StatusTypeProto.
var (
	StatusTypeProto_name = map[int32]string{
		0:  "STATUS_TYPE_UNKNOWN",
		1:  "OK",
		2:  "CREATED",
		3:  "DELETED",
		4:  "ACCEPTED",
		5:  "BAD_REQUEST",
		6:  "UNAUTHORIZED",
		7:  "FORBIDDEN",
		8:  "INTERNAL_SERVER_ERROR",
		9:  "BAD_GATEWAY",
		10: "SERVICE_UNAVAILABLE",
		11: "GATEWAY_TIMEOUT",
		12: "NOT_FOUND",
		13: "INVALID_INPUT",
	}
	StatusTypeProto_value = map[string]int32{
		"STATUS_TYPE_UNKNOWN":   0,
		"OK":                    1,
		"CREATED":               2,
		"DELETED":               3,
		"ACCEPTED":              4,
		"BAD_REQUEST":           5,
		"UNAUTHORIZED":          6,
		"FORBIDDEN":             7,
		"INTERNAL_SERVER_ERROR": 8,
		"BAD_GATEWAY":           9,
		"SERVICE_UNAVAILABLE":   10,
		"GATEWAY_TIMEOUT":       11,
		"NOT_FOUND":             12,
		"INVALID_INPUT":         13,
	}
)

func (x StatusTypeProto) Enum() *StatusTypeProto {
	p := new(StatusTypeProto)
	*p = x
	return p
}

func (x StatusTypeProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusTypeProto) Descriptor() protoreflect.EnumDescriptor {
	return file_service_grpc_proto_payload_proto_enumTypes[1].Descriptor()
}

func (StatusTypeProto) Type() protoreflect.EnumType {
	return &file_service_grpc_proto_payload_proto_enumTypes[1]
}

func (x StatusTypeProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusTypeProto.Descriptor instead.
func (StatusTypeProto) EnumDescriptor() ([]byte, []int) {
	return file_service_grpc_proto_payload_proto_rawDescGZIP(), []int{1}
}

type AccountTypeProto int32

const (
	AccountTypeProto_TEAM         AccountTypeProto = 0
	AccountTypeProto_ORGANIZATION AccountTypeProto = 1
)

// Enum value maps for AccountTypeProto.
var (
	AccountTypeProto_name = map[int32]string{
		0: "TEAM",
		1: "ORGANIZATION",
	}
	AccountTypeProto_value = map[string]int32{
		"TEAM":         0,
		"ORGANIZATION": 1,
	}
)

func (x AccountTypeProto) Enum() *AccountTypeProto {
	p := new(AccountTypeProto)
	*p = x
	return p
}

func (x AccountTypeProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountTypeProto) Descriptor() protoreflect.EnumDescriptor {
	return file_service_grpc_proto_payload_proto_enumTypes[2].Descriptor()
}

func (AccountTypeProto) Type() protoreflect.EnumType {
	return &file_service_grpc_proto_payload_proto_enumTypes[2]
}

func (x AccountTypeProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountTypeProto.Descriptor instead.
func (AccountTypeProto) EnumDescriptor() ([]byte, []int) {
	return file_service_grpc_proto_payload_proto_rawDescGZIP(), []int{2}
}

type SecurityTypeProto int32

const (
	SecurityTypeProto_SIMPLE  SecurityTypeProto = 0
	SecurityTypeProto_ADVANCE SecurityTypeProto = 1
)

// Enum value maps for SecurityTypeProto.
var (
	SecurityTypeProto_name = map[int32]string{
		0: "SIMPLE",
		1: "ADVANCE",
	}
	SecurityTypeProto_value = map[string]int32{
		"SIMPLE":  0,
		"ADVANCE": 1,
	}
)

func (x SecurityTypeProto) Enum() *SecurityTypeProto {
	p := new(SecurityTypeProto)
	*p = x
	return p
}

func (x SecurityTypeProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityTypeProto) Descriptor() protoreflect.EnumDescriptor {
	return file_service_grpc_proto_payload_proto_enumTypes[3].Descriptor()
}

func (SecurityTypeProto) Type() protoreflect.EnumType {
	return &file_service_grpc_proto_payload_proto_enumTypes[3]
}

func (x SecurityTypeProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityTypeProto.Descriptor instead.
func (SecurityTypeProto) EnumDescriptor() ([]byte, []int) {
	return file_service_grpc_proto_payload_proto_rawDescGZIP(), []int{3}
}

type EntityProto int32

const (
	EntityProto_ENTITY_UNKNOWN                                     EntityProto = 0
	EntityProto_crm_contact                                        EntityProto = 1
	EntityProto_crm_account                                        EntityProto = 2
	EntityProto_crm_lead                                           EntityProto = 3
	EntityProto_crm_opportunity                                    EntityProto = 4
	EntityProto_crm_case                                           EntityProto = 5
	EntityProto_email                                              EntityProto = 6
	EntityProto_address                                            EntityProto = 7
	EntityProto_phone                                              EntityProto = 8
	EntityProto_lookup                                             EntityProto = 9
	EntityProto_rew3_lookup                                        EntityProto = 10
	EntityProto_rtf                                                EntityProto = 11
	EntityProto_list_view                                          EntityProto = 12
	EntityProto_hrm_employee                                       EntityProto = 13
	EntityProto_hrm_performance                                    EntityProto = 14
	EntityProto_hrm_recruitment                                    EntityProto = 15
	EntityProto_hrm_training                                       EntityProto = 16
	EntityProto_rms_sale_associate                                 EntityProto = 17
	EntityProto_rms_commission                                     EntityProto = 18
	EntityProto_rms_deduction                                      EntityProto = 19
	EntityProto_rms_finance                                        EntityProto = 20
	EntityProto_rms_listing                                        EntityProto = 21
	EntityProto_rms_preferences                                    EntityProto = 22
	EntityProto_rms_property                                       EntityProto = 23
	EntityProto_rms_offer                                          EntityProto = 24
	EntityProto_rms_showing                                        EntityProto = 25
	EntityProto_rms_request                                        EntityProto = 26
	EntityProto_rms_agent                                          EntityProto = 27
	EntityProto_rms_agent_commission                               EntityProto = 28
	EntityProto_rms_property_open_house                            EntityProto = 29
	EntityProto_rms_todo_task                                      EntityProto = 30
	EntityProto_rms_purchase_agreement                             EntityProto = 31
	EntityProto_rms_listing_document                               EntityProto = 32
	EntityProto_rms_listing_purchase_agreement                     EntityProto = 33
	EntityProto_rms_listing_todo                                   EntityProto = 34
	EntityProto_rms_listing_todo_list                              EntityProto = 35
	EntityProto_rms_listing_showing                                EntityProto = 36
	EntityProto_rms_transaction                                    EntityProto = 37
	EntityProto_rms_avenue_request                                 EntityProto = 38
	EntityProto_sale_receiving_payment                             EntityProto = 39
	EntityProto_sale_transaction_associate                         EntityProto = 40
	EntityProto_sale_transaction_buyer                             EntityProto = 41
	EntityProto_sale_transaction_closing                           EntityProto = 42
	EntityProto_sale_transaction                                   EntityProto = 43
	EntityProto_sale_transaction_seller                            EntityProto = 44
	EntityProto_security_user                                      EntityProto = 45
	EntityProto_security_associate_user                            EntityProto = 46
	EntityProto_security_csrf                                      EntityProto = 47
	EntityProto_security_me                                        EntityProto = 48
	EntityProto_security_role                                      EntityProto = 49
	EntityProto_security_user_invitation                           EntityProto = 50
	EntityProto_security_user_favourite                            EntityProto = 51
	EntityProto_security_user_group                                EntityProto = 52
	EntityProto_security_user_team                                 EntityProto = 53
	EntityProto_security_user_profile                              EntityProto = 54
	EntityProto_security_collaborator_role                         EntityProto = 55
	EntityProto_security_organization_role                         EntityProto = 56
	EntityProto_security_user_activeness                           EntityProto = 57
	EntityProto_security_user_personalized_views                   EntityProto = 58
	EntityProto_security_sharing_rule                              EntityProto = 59
	EntityProto_security_default_organization_setting              EntityProto = 60
	EntityProto_security_team_visibility                           EntityProto = 61
	EntityProto_dms_file                                           EntityProto = 62
	EntityProto_dms_folder                                         EntityProto = 63
	EntityProto_dms_file_associate_meta                            EntityProto = 64
	EntityProto_dms_email                                          EntityProto = 65
	EntityProto_dms_document                                       EntityProto = 66
	EntityProto_dms_document_type                                  EntityProto = 67
	EntityProto_dms_dossier                                        EntityProto = 68
	EntityProto_dms_dossier_folder                                 EntityProto = 69
	EntityProto_dms_dossier_document_group                         EntityProto = 70
	EntityProto_dms_dossier_user_document_group                    EntityProto = 71
	EntityProto_dms_dossier_type                                   EntityProto = 72
	EntityProto_dms_dossier_collaborator                           EntityProto = 73
	EntityProto_dms_dossier_document_category_document             EntityProto = 74
	EntityProto_dms_dossier_template                               EntityProto = 75
	EntityProto_dms_dossier_template_document                      EntityProto = 76
	EntityProto_dms_dossier_template_group                         EntityProto = 77
	EntityProto_dms_dossier_category                               EntityProto = 78
	EntityProto_collaboration_blog                                 EntityProto = 79
	EntityProto_collaboration_blog_category                        EntityProto = 80
	EntityProto_collaboration_blog_tag                             EntityProto = 81
	EntityProto_collaboration_conversation                         EntityProto = 82
	EntityProto_collaboration_event                                EntityProto = 83
	EntityProto_collaboration_facebook                             EntityProto = 84
	EntityProto_collaboration_group                                EntityProto = 85
	EntityProto_collaboration_media                                EntityProto = 86
	EntityProto_collaboration_organization                         EntityProto = 87
	EntityProto_collaboration_post                                 EntityProto = 88
	EntityProto_collaboration_project                              EntityProto = 89
	EntityProto_collaboration_task                                 EntityProto = 90
	EntityProto_collaboration_call                                 EntityProto = 91
	EntityProto_collaboration_note                                 EntityProto = 92
	EntityProto_collaboration_comment                              EntityProto = 93
	EntityProto_collaboration_campaign                             EntityProto = 94
	EntityProto_collaboration_tag                                  EntityProto = 95
	EntityProto_collaboration_tag_link                             EntityProto = 96
	EntityProto_collaboration_section                              EntityProto = 97
	EntityProto_collaboration_status_update                        EntityProto = 99
	EntityProto_collaboration_stream_group                         EntityProto = 100
	EntityProto_collaboration_event_type                           EntityProto = 101
	EntityProto_collaboration_event_category                       EntityProto = 102
	EntityProto_collaboration_follow_like_status                   EntityProto = 103
	EntityProto_collaboration_chat                                 EntityProto = 104
	EntityProto_collaboration_ticket                               EntityProto = 105
	EntityProto_collaboration_email                                EntityProto = 106
	EntityProto_collaboration_workspace                            EntityProto = 107
	EntityProto_collaboration_multimedia                           EntityProto = 108
	EntityProto_collaboration_social_interest                      EntityProto = 109
	EntityProto_collaboration_poll                                 EntityProto = 110
	EntityProto_collaboration_forum                                EntityProto = 111
	EntityProto_collaboration_forum_category                       EntityProto = 112
	EntityProto_collaboration_forum_tag                            EntityProto = 113
	EntityProto_collaboration_knowledge                            EntityProto = 114
	EntityProto_collaboration_knowledge_category                   EntityProto = 115
	EntityProto_collaboration_knowledge_tag                        EntityProto = 116
	EntityProto_collaboration_form                                 EntityProto = 117
	EntityProto_collaboration_form_category                        EntityProto = 118
	EntityProto_collaboration_news                                 EntityProto = 119
	EntityProto_collaboration_news_category                        EntityProto = 120
	EntityProto_collaboration_news_tag                             EntityProto = 121
	EntityProto_collaboration_post_tag                             EntityProto = 122
	EntityProto_collaboration_post_category                        EntityProto = 123
	EntityProto_collaboration_multimedia_album                     EntityProto = 124
	EntityProto_collaboration_checklist                            EntityProto = 125
	EntityProto_collaboration_asset                                EntityProto = 126
	EntityProto_collaboration_avpost                               EntityProto = 127
	EntityProto_collaboration_meeting                              EntityProto = 128
	EntityProto_collaboration_appointment                          EntityProto = 129
	EntityProto_collaboration_library_folder                       EntityProto = 130
	EntityProto_collaboration_library_category                     EntityProto = 131
	EntityProto_collaboration_library_document                     EntityProto = 132
	EntityProto_collaboration_calendar                             EntityProto = 133
	EntityProto_collaboration_calendar_type                        EntityProto = 134
	EntityProto_collaboration_calendar_category                    EntityProto = 135
	EntityProto_workflow_                                          EntityProto = 136
	EntityProto_business_process                                   EntityProto = 137
	EntityProto_account_service_subscription                       EntityProto = 138
	EntityProto_account_service_account                            EntityProto = 139
	EntityProto_account_service_company                            EntityProto = 140
	EntityProto_account_service_avenue_account                     EntityProto = 141
	EntityProto_account_service_avenu_account                      EntityProto = 142
	EntityProto_account_service_connection                         EntityProto = 143
	EntityProto_account_service_org_access_setting                 EntityProto = 144
	EntityProto_account_service_external_user_visibility           EntityProto = 145
	EntityProto_account_service_external_user_invitation           EntityProto = 146
	EntityProto_account_service_partnership_setting                EntityProto = 147
	EntityProto_stream_activity                                    EntityProto = 148
	EntityProto_utility_notification                               EntityProto = 149
	EntityProto_rms_activity                                       EntityProto = 150
	EntityProto_sale_making_payment                                EntityProto = 151
	EntityProto_sale_payable                                       EntityProto = 152
	EntityProto_sale_receivable                                    EntityProto = 153
	EntityProto_sale_transaction_property                          EntityProto = 154
	EntityProto_history                                            EntityProto = 155
	EntityProto_subscription                                       EntityProto = 156
	EntityProto_financial_accounting_class                         EntityProto = 157
	EntityProto_financial_accounting_code                          EntityProto = 158
	EntityProto_financial_accounting_period                        EntityProto = 159
	EntityProto_financial_accounting_period_request                EntityProto = 160
	EntityProto_financial_bank_deposit_slip                        EntityProto = 161
	EntityProto_financial_bank_reconciliation                      EntityProto = 162
	EntityProto_financial_bank_transaction                         EntityProto = 163
	EntityProto_financial_billing_account                          EntityProto = 164
	EntityProto_financial_deposit_item                             EntityProto = 165
	EntityProto_financial_invoice                                  EntityProto = 166
	EntityProto_financial_invoice_item                             EntityProto = 167
	EntityProto_financial_invoice_request                          EntityProto = 168
	EntityProto_financial_normal_user                              EntityProto = 169
	EntityProto_financial_payment_receipt                          EntityProto = 170
	EntityProto_financial_payment_option                           EntityProto = 171
	EntityProto_financial_payment_receipt_item                     EntityProto = 172
	EntityProto_financial_product                                  EntityProto = 173
	EntityProto_financial_product_category                         EntityProto = 174
	EntityProto_financial_product_category_link                    EntityProto = 175
	EntityProto_financial_product_feature                          EntityProto = 176
	EntityProto_financial_product_feature_link                     EntityProto = 177
	EntityProto_financial_product_rate_plan                        EntityProto = 178
	EntityProto_financial_product_rate_plan_charge                 EntityProto = 179
	EntityProto_financial_product_rate_link                        EntityProto = 180
	EntityProto_financial_sub_accounting_head                      EntityProto = 181
	EntityProto_financial_terms                                    EntityProto = 182
	EntityProto_financial_transaction                              EntityProto = 183
	EntityProto_financial_transaction_dummy                        EntityProto = 184
	EntityProto_financial_payment_term                             EntityProto = 185
	EntityProto_financial_associate_comission_plan                 EntityProto = 186
	EntityProto_messaging_conversation                             EntityProto = 187
	EntityProto_messaging_message                                  EntityProto = 188
	EntityProto_common_lookup                                      EntityProto = 189
	EntityProto_financial_invoice_credit_notes                     EntityProto = 190
	EntityProto_financial_invoice_customers                        EntityProto = 191
	EntityProto_financial_invoice_payments                         EntityProto = 192
	EntityProto_financial_invoice_recurring_invoices               EntityProto = 193
	EntityProto_financial_expenses                                 EntityProto = 194
	EntityProto_financial_vendor                                   EntityProto = 195
	EntityProto_financial_bill                                     EntityProto = 196
	EntityProto_financial_bill_payment                             EntityProto = 197
	EntityProto_financial_sales_tax                                EntityProto = 198
	EntityProto_financial_recurring_template                       EntityProto = 199
	EntityProto_financial_recurring_schedule                       EntityProto = 200
	EntityProto_financial_estimate                                 EntityProto = 201
	EntityProto_financial_debit_note                               EntityProto = 202
	EntityProto_financial_credit_note                              EntityProto = 203
	EntityProto_financial_recurring_invoice_payment                EntityProto = 204
	EntityProto_financial_recurring_invoice                        EntityProto = 205
	EntityProto_financial_customer                                 EntityProto = 206
	EntityProto_avenue_email_signature                             EntityProto = 207
	EntityProto_avenue_email_schedule                              EntityProto = 208
	EntityProto_avenue_email_template                              EntityProto = 209
	EntityProto_avenue_email                                       EntityProto = 210
	EntityProto_financial_office                                   EntityProto = 211
	EntityProto_financial_trust_account                            EntityProto = 212
	EntityProto_financial_agent                                    EntityProto = 213
	EntityProto_collaboration_project_group                        EntityProto = 214
	EntityProto_app_security                                       EntityProto = 215
	EntityProto_app_security_profile                               EntityProto = 216
	EntityProto_context_user_preference                            EntityProto = 217
	EntityProto_collaboration_task_template                        EntityProto = 218
	EntityProto_utility_activity                                   EntityProto = 219
	EntityProto_inbox                                              EntityProto = 220
	EntityProto_dms_dossier_people                                 EntityProto = 221
	EntityProto_dms_dossier_archive                                EntityProto = 222
	EntityProto_collaboration_workflow                             EntityProto = 223
	EntityProto_account_service_partnership_partnership            EntityProto = 224
	EntityProto_account_service_partnership_partnership_invitation EntityProto = 225
	EntityProto_account_service_partnership_partner                EntityProto = 226
	EntityProto_account_service_partnership_partner_unlink_request EntityProto = 227
	EntityProto_account_service_collaborator                       EntityProto = 228
	EntityProto_account_service_network_user                       EntityProto = 229
	EntityProto_rms_partner_listing                                EntityProto = 230
	EntityProto_rms_partner_transaction                            EntityProto = 231
	EntityProto_rms_agent_plan                                     EntityProto = 232
)

// Enum value maps for EntityProto.
var (
	EntityProto_name = map[int32]string{
		0:   "ENTITY_UNKNOWN",
		1:   "crm_contact",
		2:   "crm_account",
		3:   "crm_lead",
		4:   "crm_opportunity",
		5:   "crm_case",
		6:   "email",
		7:   "address",
		8:   "phone",
		9:   "lookup",
		10:  "rew3_lookup",
		11:  "rtf",
		12:  "list_view",
		13:  "hrm_employee",
		14:  "hrm_performance",
		15:  "hrm_recruitment",
		16:  "hrm_training",
		17:  "rms_sale_associate",
		18:  "rms_commission",
		19:  "rms_deduction",
		20:  "rms_finance",
		21:  "rms_listing",
		22:  "rms_preferences",
		23:  "rms_property",
		24:  "rms_offer",
		25:  "rms_showing",
		26:  "rms_request",
		27:  "rms_agent",
		28:  "rms_agent_commission",
		29:  "rms_property_open_house",
		30:  "rms_todo_task",
		31:  "rms_purchase_agreement",
		32:  "rms_listing_document",
		33:  "rms_listing_purchase_agreement",
		34:  "rms_listing_todo",
		35:  "rms_listing_todo_list",
		36:  "rms_listing_showing",
		37:  "rms_transaction",
		38:  "rms_avenue_request",
		39:  "sale_receiving_payment",
		40:  "sale_transaction_associate",
		41:  "sale_transaction_buyer",
		42:  "sale_transaction_closing",
		43:  "sale_transaction",
		44:  "sale_transaction_seller",
		45:  "security_user",
		46:  "security_associate_user",
		47:  "security_csrf",
		48:  "security_me",
		49:  "security_role",
		50:  "security_user_invitation",
		51:  "security_user_favourite",
		52:  "security_user_group",
		53:  "security_user_team",
		54:  "security_user_profile",
		55:  "security_collaborator_role",
		56:  "security_organization_role",
		57:  "security_user_activeness",
		58:  "security_user_personalized_views",
		59:  "security_sharing_rule",
		60:  "security_default_organization_setting",
		61:  "security_team_visibility",
		62:  "dms_file",
		63:  "dms_folder",
		64:  "dms_file_associate_meta",
		65:  "dms_email",
		66:  "dms_document",
		67:  "dms_document_type",
		68:  "dms_dossier",
		69:  "dms_dossier_folder",
		70:  "dms_dossier_document_group",
		71:  "dms_dossier_user_document_group",
		72:  "dms_dossier_type",
		73:  "dms_dossier_collaborator",
		74:  "dms_dossier_document_category_document",
		75:  "dms_dossier_template",
		76:  "dms_dossier_template_document",
		77:  "dms_dossier_template_group",
		78:  "dms_dossier_category",
		79:  "collaboration_blog",
		80:  "collaboration_blog_category",
		81:  "collaboration_blog_tag",
		82:  "collaboration_conversation",
		83:  "collaboration_event",
		84:  "collaboration_facebook",
		85:  "collaboration_group",
		86:  "collaboration_media",
		87:  "collaboration_organization",
		88:  "collaboration_post",
		89:  "collaboration_project",
		90:  "collaboration_task",
		91:  "collaboration_call",
		92:  "collaboration_note",
		93:  "collaboration_comment",
		94:  "collaboration_campaign",
		95:  "collaboration_tag",
		96:  "collaboration_tag_link",
		97:  "collaboration_section",
		99:  "collaboration_status_update",
		100: "collaboration_stream_group",
		101: "collaboration_event_type",
		102: "collaboration_event_category",
		103: "collaboration_follow_like_status",
		104: "collaboration_chat",
		105: "collaboration_ticket",
		106: "collaboration_email",
		107: "collaboration_workspace",
		108: "collaboration_multimedia",
		109: "collaboration_social_interest",
		110: "collaboration_poll",
		111: "collaboration_forum",
		112: "collaboration_forum_category",
		113: "collaboration_forum_tag",
		114: "collaboration_knowledge",
		115: "collaboration_knowledge_category",
		116: "collaboration_knowledge_tag",
		117: "collaboration_form",
		118: "collaboration_form_category",
		119: "collaboration_news",
		120: "collaboration_news_category",
		121: "collaboration_news_tag",
		122: "collaboration_post_tag",
		123: "collaboration_post_category",
		124: "collaboration_multimedia_album",
		125: "collaboration_checklist",
		126: "collaboration_asset",
		127: "collaboration_avpost",
		128: "collaboration_meeting",
		129: "collaboration_appointment",
		130: "collaboration_library_folder",
		131: "collaboration_library_category",
		132: "collaboration_library_document",
		133: "collaboration_calendar",
		134: "collaboration_calendar_type",
		135: "collaboration_calendar_category",
		136: "workflow_",
		137: "business_process",
		138: "account_service_subscription",
		139: "account_service_account",
		140: "account_service_company",
		141: "account_service_avenue_account",
		142: "account_service_avenu_account",
		143: "account_service_connection",
		144: "account_service_org_access_setting",
		145: "account_service_external_user_visibility",
		146: "account_service_external_user_invitation",
		147: "account_service_partnership_setting",
		148: "stream_activity",
		149: "utility_notification",
		150: "rms_activity",
		151: "sale_making_payment",
		152: "sale_payable",
		153: "sale_receivable",
		154: "sale_transaction_property",
		155: "history",
		156: "subscription",
		157: "financial_accounting_class",
		158: "financial_accounting_code",
		159: "financial_accounting_period",
		160: "financial_accounting_period_request",
		161: "financial_bank_deposit_slip",
		162: "financial_bank_reconciliation",
		163: "financial_bank_transaction",
		164: "financial_billing_account",
		165: "financial_deposit_item",
		166: "financial_invoice",
		167: "financial_invoice_item",
		168: "financial_invoice_request",
		169: "financial_normal_user",
		170: "financial_payment_receipt",
		171: "financial_payment_option",
		172: "financial_payment_receipt_item",
		173: "financial_product",
		174: "financial_product_category",
		175: "financial_product_category_link",
		176: "financial_product_feature",
		177: "financial_product_feature_link",
		178: "financial_product_rate_plan",
		179: "financial_product_rate_plan_charge",
		180: "financial_product_rate_link",
		181: "financial_sub_accounting_head",
		182: "financial_terms",
		183: "financial_transaction",
		184: "financial_transaction_dummy",
		185: "financial_payment_term",
		186: "financial_associate_comission_plan",
		187: "messaging_conversation",
		188: "messaging_message",
		189: "common_lookup",
		190: "financial_invoice_credit_notes",
		191: "financial_invoice_customers",
		192: "financial_invoice_payments",
		193: "financial_invoice_recurring_invoices",
		194: "financial_expenses",
		195: "financial_vendor",
		196: "financial_bill",
		197: "financial_bill_payment",
		198: "financial_sales_tax",
		199: "financial_recurring_template",
		200: "financial_recurring_schedule",
		201: "financial_estimate",
		202: "financial_debit_note",
		203: "financial_credit_note",
		204: "financial_recurring_invoice_payment",
		205: "financial_recurring_invoice",
		206: "financial_customer",
		207: "avenue_email_signature",
		208: "avenue_email_schedule",
		209: "avenue_email_template",
		210: "avenue_email",
		211: "financial_office",
		212: "financial_trust_account",
		213: "financial_agent",
		214: "collaboration_project_group",
		215: "app_security",
		216: "app_security_profile",
		217: "context_user_preference",
		218: "collaboration_task_template",
		219: "utility_activity",
		220: "inbox",
		221: "dms_dossier_people",
		222: "dms_dossier_archive",
		223: "collaboration_workflow",
		224: "account_service_partnership_partnership",
		225: "account_service_partnership_partnership_invitation",
		226: "account_service_partnership_partner",
		227: "account_service_partnership_partner_unlink_request",
		228: "account_service_collaborator",
		229: "account_service_network_user",
		230: "rms_partner_listing",
		231: "rms_partner_transaction",
		232: "rms_agent_plan",
	}
	EntityProto_value = map[string]int32{
		"ENTITY_UNKNOWN":                                     0,
		"crm_contact":                                        1,
		"crm_account":                                        2,
		"crm_lead":                                           3,
		"crm_opportunity":                                    4,
		"crm_case":                                           5,
		"email":                                              6,
		"address":                                            7,
		"phone":                                              8,
		"lookup":                                             9,
		"rew3_lookup":                                        10,
		"rtf":                                                11,
		"list_view":                                          12,
		"hrm_employee":                                       13,
		"hrm_performance":                                    14,
		"hrm_recruitment":                                    15,
		"hrm_training":                                       16,
		"rms_sale_associate":                                 17,
		"rms_commission":                                     18,
		"rms_deduction":                                      19,
		"rms_finance":                                        20,
		"rms_listing":                                        21,
		"rms_preferences":                                    22,
		"rms_property":                                       23,
		"rms_offer":                                          24,
		"rms_showing":                                        25,
		"rms_request":                                        26,
		"rms_agent":                                          27,
		"rms_agent_commission":                               28,
		"rms_property_open_house":                            29,
		"rms_todo_task":                                      30,
		"rms_purchase_agreement":                             31,
		"rms_listing_document":                               32,
		"rms_listing_purchase_agreement":                     33,
		"rms_listing_todo":                                   34,
		"rms_listing_todo_list":                              35,
		"rms_listing_showing":                                36,
		"rms_transaction":                                    37,
		"rms_avenue_request":                                 38,
		"sale_receiving_payment":                             39,
		"sale_transaction_associate":                         40,
		"sale_transaction_buyer":                             41,
		"sale_transaction_closing":                           42,
		"sale_transaction":                                   43,
		"sale_transaction_seller":                            44,
		"security_user":                                      45,
		"security_associate_user":                            46,
		"security_csrf":                                      47,
		"security_me":                                        48,
		"security_role":                                      49,
		"security_user_invitation":                           50,
		"security_user_favourite":                            51,
		"security_user_group":                                52,
		"security_user_team":                                 53,
		"security_user_profile":                              54,
		"security_collaborator_role":                         55,
		"security_organization_role":                         56,
		"security_user_activeness":                           57,
		"security_user_personalized_views":                   58,
		"security_sharing_rule":                              59,
		"security_default_organization_setting":              60,
		"security_team_visibility":                           61,
		"dms_file":                                           62,
		"dms_folder":                                         63,
		"dms_file_associate_meta":                            64,
		"dms_email":                                          65,
		"dms_document":                                       66,
		"dms_document_type":                                  67,
		"dms_dossier":                                        68,
		"dms_dossier_folder":                                 69,
		"dms_dossier_document_group":                         70,
		"dms_dossier_user_document_group":                    71,
		"dms_dossier_type":                                   72,
		"dms_dossier_collaborator":                           73,
		"dms_dossier_document_category_document":             74,
		"dms_dossier_template":                               75,
		"dms_dossier_template_document":                      76,
		"dms_dossier_template_group":                         77,
		"dms_dossier_category":                               78,
		"collaboration_blog":                                 79,
		"collaboration_blog_category":                        80,
		"collaboration_blog_tag":                             81,
		"collaboration_conversation":                         82,
		"collaboration_event":                                83,
		"collaboration_facebook":                             84,
		"collaboration_group":                                85,
		"collaboration_media":                                86,
		"collaboration_organization":                         87,
		"collaboration_post":                                 88,
		"collaboration_project":                              89,
		"collaboration_task":                                 90,
		"collaboration_call":                                 91,
		"collaboration_note":                                 92,
		"collaboration_comment":                              93,
		"collaboration_campaign":                             94,
		"collaboration_tag":                                  95,
		"collaboration_tag_link":                             96,
		"collaboration_section":                              97,
		"collaboration_status_update":                        99,
		"collaboration_stream_group":                         100,
		"collaboration_event_type":                           101,
		"collaboration_event_category":                       102,
		"collaboration_follow_like_status":                   103,
		"collaboration_chat":                                 104,
		"collaboration_ticket":                               105,
		"collaboration_email":                                106,
		"collaboration_workspace":                            107,
		"collaboration_multimedia":                           108,
		"collaboration_social_interest":                      109,
		"collaboration_poll":                                 110,
		"collaboration_forum":                                111,
		"collaboration_forum_category":                       112,
		"collaboration_forum_tag":                            113,
		"collaboration_knowledge":                            114,
		"collaboration_knowledge_category":                   115,
		"collaboration_knowledge_tag":                        116,
		"collaboration_form":                                 117,
		"collaboration_form_category":                        118,
		"collaboration_news":                                 119,
		"collaboration_news_category":                        120,
		"collaboration_news_tag":                             121,
		"collaboration_post_tag":                             122,
		"collaboration_post_category":                        123,
		"collaboration_multimedia_album":                     124,
		"collaboration_checklist":                            125,
		"collaboration_asset":                                126,
		"collaboration_avpost":                               127,
		"collaboration_meeting":                              128,
		"collaboration_appointment":                          129,
		"collaboration_library_folder":                       130,
		"collaboration_library_category":                     131,
		"collaboration_library_document":                     132,
		"collaboration_calendar":                             133,
		"collaboration_calendar_type":                        134,
		"collaboration_calendar_category":                    135,
		"workflow_":                                          136,
		"business_process":                                   137,
		"account_service_subscription":                       138,
		"account_service_account":                            139,
		"account_service_company":                            140,
		"account_service_avenue_account":                     141,
		"account_service_avenu_account":                      142,
		"account_service_connection":                         143,
		"account_service_org_access_setting":                 144,
		"account_service_external_user_visibility":           145,
		"account_service_external_user_invitation":           146,
		"account_service_partnership_setting":                147,
		"stream_activity":                                    148,
		"utility_notification":                               149,
		"rms_activity":                                       150,
		"sale_making_payment":                                151,
		"sale_payable":                                       152,
		"sale_receivable":                                    153,
		"sale_transaction_property":                          154,
		"history":                                            155,
		"subscription":                                       156,
		"financial_accounting_class":                         157,
		"financial_accounting_code":                          158,
		"financial_accounting_period":                        159,
		"financial_accounting_period_request":                160,
		"financial_bank_deposit_slip":                        161,
		"financial_bank_reconciliation":                      162,
		"financial_bank_transaction":                         163,
		"financial_billing_account":                          164,
		"financial_deposit_item":                             165,
		"financial_invoice":                                  166,
		"financial_invoice_item":                             167,
		"financial_invoice_request":                          168,
		"financial_normal_user":                              169,
		"financial_payment_receipt":                          170,
		"financial_payment_option":                           171,
		"financial_payment_receipt_item":                     172,
		"financial_product":                                  173,
		"financial_product_category":                         174,
		"financial_product_category_link":                    175,
		"financial_product_feature":                          176,
		"financial_product_feature_link":                     177,
		"financial_product_rate_plan":                        178,
		"financial_product_rate_plan_charge":                 179,
		"financial_product_rate_link":                        180,
		"financial_sub_accounting_head":                      181,
		"financial_terms":                                    182,
		"financial_transaction":                              183,
		"financial_transaction_dummy":                        184,
		"financial_payment_term":                             185,
		"financial_associate_comission_plan":                 186,
		"messaging_conversation":                             187,
		"messaging_message":                                  188,
		"common_lookup":                                      189,
		"financial_invoice_credit_notes":                     190,
		"financial_invoice_customers":                        191,
		"financial_invoice_payments":                         192,
		"financial_invoice_recurring_invoices":               193,
		"financial_expenses":                                 194,
		"financial_vendor":                                   195,
		"financial_bill":                                     196,
		"financial_bill_payment":                             197,
		"financial_sales_tax":                                198,
		"financial_recurring_template":                       199,
		"financial_recurring_schedule":                       200,
		"financial_estimate":                                 201,
		"financial_debit_note":                               202,
		"financial_credit_note":                              203,
		"financial_recurring_invoice_payment":                204,
		"financial_recurring_invoice":                        205,
		"financial_customer":                                 206,
		"avenue_email_signature":                             207,
		"avenue_email_schedule":                              208,
		"avenue_email_template":                              209,
		"avenue_email":                                       210,
		"financial_office":                                   211,
		"financial_trust_account":                            212,
		"financial_agent":                                    213,
		"collaboration_project_group":                        214,
		"app_security":                                       215,
		"app_security_profile":                               216,
		"context_user_preference":                            217,
		"collaboration_task_template":                        218,
		"utility_activity":                                   219,
		"inbox":                                              220,
		"dms_dossier_people":                                 221,
		"dms_dossier_archive":                                222,
		"collaboration_workflow":                             223,
		"account_service_partnership_partnership":            224,
		"account_service_partnership_partnership_invitation": 225,
		"account_service_partnership_partner":                226,
		"account_service_partnership_partner_unlink_request": 227,
		"account_service_collaborator":                       228,
		"account_service_network_user":                       229,
		"rms_partner_listing":                                230,
		"rms_partner_transaction":                            231,
		"rms_agent_plan":                                     232,
	}
)

func (x EntityProto) Enum() *EntityProto {
	p := new(EntityProto)
	*p = x
	return p
}

func (x EntityProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityProto) Descriptor() protoreflect.EnumDescriptor {
	return file_service_grpc_proto_payload_proto_enumTypes[4].Descriptor()
}

func (EntityProto) Type() protoreflect.EnumType {
	return &file_service_grpc_proto_payload_proto_enumTypes[4]
}

func (x EntityProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityProto.Descriptor instead.
func (EntityProto) EnumDescriptor() ([]byte, []int) {
	return file_service_grpc_proto_payload_proto_rawDescGZIP(), []int{4}
}

type RequestPayloadProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiOperation   string               `protobuf:"bytes,1,opt,name=api_operation,json=apiOperation,proto3" json:"api_operation,omitempty"`
	RequestContext *RequestContextProto `protobuf:"bytes,2,opt,name=request_context,json=requestContext,proto3" json:"request_context,omitempty"`
	Data           *anypb.Any           `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RequestPayloadProto) Reset() {
	*x = RequestPayloadProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_grpc_proto_payload_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestPayloadProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPayloadProto) ProtoMessage() {}

func (x *RequestPayloadProto) ProtoReflect() protoreflect.Message {
	mi := &file_service_grpc_proto_payload_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestPayloadProto.ProtoReflect.Descriptor instead.
func (*RequestPayloadProto) Descriptor() ([]byte, []int) {
	return file_service_grpc_proto_payload_proto_rawDescGZIP(), []int{0}
}

func (x *RequestPayloadProto) GetApiOperation() string {
	if x != nil {
		return x.ApiOperation
	}
	return ""
}

func (x *RequestPayloadProto) GetRequestContext() *RequestContextProto {
	if x != nil {
		return x.RequestContext
	}
	return nil
}

func (x *RequestPayloadProto) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type ResponsePayloadProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiOperation  string          `protobuf:"bytes,1,opt,name=api_operation,json=apiOperation,proto3" json:"api_operation,omitempty"`
	StatusType    StatusTypeProto `protobuf:"varint,2,opt,name=status_type,json=statusType,proto3,enum=payload.StatusTypeProto" json:"status_type,omitempty"`
	StatusMessage string          `protobuf:"bytes,3,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	Data          *anypb.Any      `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	DataMeta      *DataMeta       `protobuf:"bytes,5,opt,name=data_meta,json=dataMeta,proto3" json:"data_meta,omitempty"`
}

func (x *ResponsePayloadProto) Reset() {
	*x = ResponsePayloadProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_grpc_proto_payload_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePayloadProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePayloadProto) ProtoMessage() {}

func (x *ResponsePayloadProto) ProtoReflect() protoreflect.Message {
	mi := &file_service_grpc_proto_payload_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePayloadProto.ProtoReflect.Descriptor instead.
func (*ResponsePayloadProto) Descriptor() ([]byte, []int) {
	return file_service_grpc_proto_payload_proto_rawDescGZIP(), []int{1}
}

func (x *ResponsePayloadProto) GetApiOperation() string {
	if x != nil {
		return x.ApiOperation
	}
	return ""
}

func (x *ResponsePayloadProto) GetStatusType() StatusTypeProto {
	if x != nil {
		return x.StatusType
	}
	return StatusTypeProto_STATUS_TYPE_UNKNOWN
}

func (x *ResponsePayloadProto) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *ResponsePayloadProto) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResponsePayloadProto) GetDataMeta() *DataMeta {
	if x != nil {
		return x.DataMeta
	}
	return nil
}

type DataMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *DataType `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DataMeta) Reset() {
	*x = DataMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_grpc_proto_payload_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataMeta) ProtoMessage() {}

func (x *DataMeta) ProtoReflect() protoreflect.Message {
	mi := &file_service_grpc_proto_payload_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataMeta.ProtoReflect.Descriptor instead.
func (*DataMeta) Descriptor() ([]byte, []int) {
	return file_service_grpc_proto_payload_proto_rawDescGZIP(), []int{2}
}

func (x *DataMeta) GetType() *DataType {
	if x != nil {
		return x.Type
	}
	return nil
}

type DataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataType DataTypeEnum `protobuf:"varint,1,opt,name=dataType,proto3,enum=payload.DataTypeEnum" json:"dataType,omitempty"` // Type is among one of Empty, Binary, List, Object and Scalar.
	TypeMeta *anypb.Any   `protobuf:"bytes,2,opt,name=typeMeta,proto3" json:"typeMeta,omitempty"`
}

func (x *DataType) Reset() {
	*x = DataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_grpc_proto_payload_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataType) ProtoMessage() {}

func (x *DataType) ProtoReflect() protoreflect.Message {
	mi := &file_service_grpc_proto_payload_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataType.ProtoReflect.Descriptor instead.
func (*DataType) Descriptor() ([]byte, []int) {
	return file_service_grpc_proto_payload_proto_rawDescGZIP(), []int{3}
}

func (x *DataType) GetDataType() DataTypeEnum {
	if x != nil {
		return x.DataType
	}
	return DataTypeEnum_EMPTY
}

func (x *DataType) GetTypeMeta() *anypb.Any {
	if x != nil {
		return x.TypeMeta
	}
	return nil
}

type RequestContextProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member           string                     `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	User             *MiniUserProto             `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	FullName         string                     `protobuf:"bytes,3,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	Lang             string                     `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"`
	Command          *wrapperspb.StringValue    `protobuf:"bytes,5,opt,name=command,proto3" json:"command,omitempty"`
	ETag             *wrapperspb.StringValue    `protobuf:"bytes,6,opt,name=e_tag,json=eTag,proto3" json:"e_tag,omitempty"`
	Entity           *wrapperspb.StringValue    `protobuf:"bytes,7,opt,name=entity,proto3" json:"entity,omitempty"`
	Module           *wrapperspb.StringValue    `protobuf:"bytes,8,opt,name=module,proto3" json:"module,omitempty"`
	IsExternal       bool                       `protobuf:"varint,9,opt,name=is_external,json=isExternal,proto3" json:"is_external,omitempty"`
	IsAdmin          bool                       `protobuf:"varint,10,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
	Info             *UserInfoProto             `protobuf:"bytes,11,opt,name=info,proto3" json:"info,omitempty"`
	Timezone         *wrapperspb.StringValue    `protobuf:"bytes,12,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Teams            []*TeamMiniAliasProto      `protobuf:"bytes,13,rep,name=teams,proto3" json:"teams,omitempty"`
	SubordinateUsers []string                   `protobuf:"bytes,14,rep,name=subordinate_users,json=subordinateUsers,proto3" json:"subordinate_users,omitempty"`
	RulesContext     []*SharingRuleContextProto `protobuf:"bytes,15,rep,name=rules_context,json=rulesContext,proto3" json:"rules_context,omitempty"`
	Actions          *UserActionsProto          `protobuf:"bytes,16,opt,name=actions,proto3" json:"actions,omitempty"`
	AccountType      AccountTypeProto           `protobuf:"varint,17,opt,name=account_type,json=accountType,proto3,enum=payload.AccountTypeProto" json:"account_type,omitempty"`
	SecurityType     SecurityTypeProto          `protobuf:"varint,18,opt,name=security_type,json=securityType,proto3,enum=payload.SecurityTypeProto" json:"security_type,omitempty"`
}

func (x *RequestContextProto) Reset() {
	*x = RequestContextProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_grpc_proto_payload_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestContextProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestContextProto) ProtoMessage() {}

func (x *RequestContextProto) ProtoReflect() protoreflect.Message {
	mi := &file_service_grpc_proto_payload_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestContextProto.ProtoReflect.Descriptor instead.
func (*RequestContextProto) Descriptor() ([]byte, []int) {
	return file_service_grpc_proto_payload_proto_rawDescGZIP(), []int{4}
}

func (x *RequestContextProto) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

func (x *RequestContextProto) GetUser() *MiniUserProto {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *RequestContextProto) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *RequestContextProto) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *RequestContextProto) GetCommand() *wrapperspb.StringValue {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *RequestContextProto) GetETag() *wrapperspb.StringValue {
	if x != nil {
		return x.ETag
	}
	return nil
}

func (x *RequestContextProto) GetEntity() *wrapperspb.StringValue {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *RequestContextProto) GetModule() *wrapperspb.StringValue {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *RequestContextProto) GetIsExternal() bool {
	if x != nil {
		return x.IsExternal
	}
	return false
}

func (x *RequestContextProto) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *RequestContextProto) GetInfo() *UserInfoProto {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *RequestContextProto) GetTimezone() *wrapperspb.StringValue {
	if x != nil {
		return x.Timezone
	}
	return nil
}

func (x *RequestContextProto) GetTeams() []*TeamMiniAliasProto {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *RequestContextProto) GetSubordinateUsers() []string {
	if x != nil {
		return x.SubordinateUsers
	}
	return nil
}

func (x *RequestContextProto) GetRulesContext() []*SharingRuleContextProto {
	if x != nil {
		return x.RulesContext
	}
	return nil
}

func (x *RequestContextProto) GetActions() *UserActionsProto {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *RequestContextProto) GetAccountType() AccountTypeProto {
	if x != nil {
		return x.AccountType
	}
	return AccountTypeProto_TEAM
}

func (x *RequestContextProto) GetSecurityType() SecurityTypeProto {
	if x != nil {
		return x.SecurityType
	}
	return SecurityTypeProto_SIMPLE
}

type MiniUserProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId         *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=_id,proto3" json:"_id,omitempty"`
	FirstName   *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Userpic     *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=userpic,proto3" json:"userpic,omitempty"`
	RoleName    *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	Title       *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	JobTitle    *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=job_title,json=jobTitle,proto3" json:"job_title,omitempty"`
	CompanyName *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
}

func (x *MiniUserProto) Reset() {
	*x = MiniUserProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_grpc_proto_payload_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniUserProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniUserProto) ProtoMessage() {}

func (x *MiniUserProto) ProtoReflect() protoreflect.Message {
	mi := &file_service_grpc_proto_payload_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniUserProto.ProtoReflect.Descriptor instead.
func (*MiniUserProto) Descriptor() ([]byte, []int) {
	return file_service_grpc_proto_payload_proto_rawDescGZIP(), []int{5}
}

func (x *MiniUserProto) GetXId() *wrapperspb.StringValue {
	if x != nil {
		return x.XId
	}
	return nil
}

func (x *MiniUserProto) GetFirstName() *wrapperspb.StringValue {
	if x != nil {
		return x.FirstName
	}
	return nil
}

func (x *MiniUserProto) GetLastName() *wrapperspb.StringValue {
	if x != nil {
		return x.LastName
	}
	return nil
}

func (x *MiniUserProto) GetUserpic() *wrapperspb.StringValue {
	if x != nil {
		return x.Userpic
	}
	return nil
}

func (x *MiniUserProto) GetRoleName() *wrapperspb.StringValue {
	if x != nil {
		return x.RoleName
	}
	return nil
}

func (x *MiniUserProto) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *MiniUserProto) GetJobTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.JobTitle
	}
	return nil
}

func (x *MiniUserProto) GetCompanyName() *wrapperspb.StringValue {
	if x != nil {
		return x.CompanyName
	}
	return nil
}

type UserInfoProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email       []*EmailProto      `protobuf:"bytes,1,rep,name=email,proto3" json:"email,omitempty"`
	PhoneNumber []*PhoneProto      `protobuf:"bytes,2,rep,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Personal    *UserPersonalProto `protobuf:"bytes,3,opt,name=personal,proto3" json:"personal,omitempty"`
	Company     *CompanyProto      `protobuf:"bytes,4,opt,name=company,proto3" json:"company,omitempty"`
}

func (x *UserInfoProto) Reset() {
	*x = UserInfoProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_grpc_proto_payload_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoProto) ProtoMessage() {}

func (x *UserInfoProto) ProtoReflect() protoreflect.Message {
	mi := &file_service_grpc_proto_payload_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoProto.ProtoReflect.Descriptor instead.
func (*UserInfoProto) Descriptor() ([]byte, []int) {
	return file_service_grpc_proto_payload_proto_rawDescGZIP(), []int{6}
}

func (x *UserInfoProto) GetEmail() []*EmailProto {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *UserInfoProto) GetPhoneNumber() []*PhoneProto {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

func (x *UserInfoProto) GetPersonal() *UserPersonalProto {
	if x != nil {
		return x.Personal
	}
	return nil
}

func (x *UserInfoProto) GetCompany() *CompanyProto {
	if x != nil {
		return x.Company
	}
	return nil
}

type TeamMiniAliasProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId  string `protobuf:"bytes,1,opt,name=_id,proto3" json:"_id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TeamMiniAliasProto) Reset() {
	*x = TeamMiniAliasProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_grpc_proto_payload_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamMiniAliasProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamMiniAliasProto) ProtoMessage() {}

func (x *TeamMiniAliasProto) ProtoReflect() protoreflect.Message {
	mi := &file_service_grpc_proto_payload_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamMiniAliasProto.ProtoReflect.Descriptor instead.
func (*TeamMiniAliasProto) Descriptor() ([]byte, []int) {
	return file_service_grpc_proto_payload_proto_rawDescGZIP(), []int{7}
}

func (x *TeamMiniAliasProto) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

func (x *TeamMiniAliasProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SharingRuleContextProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity       EntityProto `protobuf:"varint,1,opt,name=entity,proto3,enum=payload.EntityProto" json:"entity,omitempty"`
	VisibleUsers []string    `protobuf:"bytes,2,rep,name=visible_users,json=visibleUsers,proto3" json:"visible_users,omitempty"`
}

func (x *SharingRuleContextProto) Reset() {
	*x = SharingRuleContextProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_grpc_proto_payload_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharingRuleContextProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharingRuleContextProto) ProtoMessage() {}

func (x *SharingRuleContextProto) ProtoReflect() protoreflect.Message {
	mi := &file_service_grpc_proto_payload_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharingRuleContextProto.ProtoReflect.Descriptor instead.
func (*SharingRuleContextProto) Descriptor() ([]byte, []int) {
	return file_service_grpc_proto_payload_proto_rawDescGZIP(), []int{8}
}

func (x *SharingRuleContextProto) GetEntity() EntityProto {
	if x != nil {
		return x.Entity
	}
	return EntityProto_ENTITY_UNKNOWN
}

func (x *SharingRuleContextProto) GetVisibleUsers() []string {
	if x != nil {
		return x.VisibleUsers
	}
	return nil
}

type PhoneProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneType *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=phone_type,json=phoneType,proto3" json:"phone_type,omitempty"`
	Value     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	IsPrimary *wrapperspb.Int32Value  `protobuf:"bytes,3,opt,name=is_primary,json=isPrimary,proto3" json:"is_primary,omitempty"`
}

func (x *PhoneProto) Reset() {
	*x = PhoneProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_grpc_proto_payload_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhoneProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneProto) ProtoMessage() {}

func (x *PhoneProto) ProtoReflect() protoreflect.Message {
	mi := &file_service_grpc_proto_payload_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneProto.ProtoReflect.Descriptor instead.
func (*PhoneProto) Descriptor() ([]byte, []int) {
	return file_service_grpc_proto_payload_proto_rawDescGZIP(), []int{9}
}

func (x *PhoneProto) GetPhoneType() *wrapperspb.StringValue {
	if x != nil {
		return x.PhoneType
	}
	return nil
}

func (x *PhoneProto) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PhoneProto) GetIsPrimary() *wrapperspb.Int32Value {
	if x != nil {
		return x.IsPrimary
	}
	return nil
}

type EmailProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmailType *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=email_type,json=emailType,proto3" json:"email_type,omitempty"`
	Value     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	IsPrimary *wrapperspb.Int32Value  `protobuf:"bytes,3,opt,name=is_primary,json=isPrimary,proto3" json:"is_primary,omitempty"`
}

func (x *EmailProto) Reset() {
	*x = EmailProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_grpc_proto_payload_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailProto) ProtoMessage() {}

func (x *EmailProto) ProtoReflect() protoreflect.Message {
	mi := &file_service_grpc_proto_payload_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailProto.ProtoReflect.Descriptor instead.
func (*EmailProto) Descriptor() ([]byte, []int) {
	return file_service_grpc_proto_payload_proto_rawDescGZIP(), []int{10}
}

func (x *EmailProto) GetEmailType() *wrapperspb.StringValue {
	if x != nil {
		return x.EmailType
	}
	return nil
}

func (x *EmailProto) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *EmailProto) GetIsPrimary() *wrapperspb.Int32Value {
	if x != nil {
		return x.IsPrimary
	}
	return nil
}

type TeamActionsProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostSignUpCompleted bool `protobuf:"varint,1,opt,name=post_sign_up_completed,json=postSignUpCompleted,proto3" json:"post_sign_up_completed,omitempty"`
}

func (x *TeamActionsProto) Reset() {
	*x = TeamActionsProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_grpc_proto_payload_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamActionsProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamActionsProto) ProtoMessage() {}

func (x *TeamActionsProto) ProtoReflect() protoreflect.Message {
	mi := &file_service_grpc_proto_payload_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamActionsProto.ProtoReflect.Descriptor instead.
func (*TeamActionsProto) Descriptor() ([]byte, []int) {
	return file_service_grpc_proto_payload_proto_rawDescGZIP(), []int{11}
}

func (x *TeamActionsProto) GetPostSignUpCompleted() bool {
	if x != nil {
		return x.PostSignUpCompleted
	}
	return false
}

type UserActionsProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamActions *TeamActionsProto `protobuf:"bytes,1,opt,name=team_actions,json=teamActions,proto3" json:"team_actions,omitempty"`
}

func (x *UserActionsProto) Reset() {
	*x = UserActionsProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_grpc_proto_payload_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserActionsProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserActionsProto) ProtoMessage() {}

func (x *UserActionsProto) ProtoReflect() protoreflect.Message {
	mi := &file_service_grpc_proto_payload_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserActionsProto.ProtoReflect.Descriptor instead.
func (*UserActionsProto) Descriptor() ([]byte, []int) {
	return file_service_grpc_proto_payload_proto_rawDescGZIP(), []int{12}
}

func (x *UserActionsProto) GetTeamActions() *TeamActionsProto {
	if x != nil {
		return x.TeamActions
	}
	return nil
}

type UserPersonalProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	MiddleName *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=middle_name,json=middleName,proto3" json:"middle_name,omitempty"`
	LastName   *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	FullName   *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	Salutation *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=salutation,proto3" json:"salutation,omitempty"`
	Gender     *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=gender,proto3" json:"gender,omitempty"`
}

func (x *UserPersonalProto) Reset() {
	*x = UserPersonalProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_grpc_proto_payload_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPersonalProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPersonalProto) ProtoMessage() {}

func (x *UserPersonalProto) ProtoReflect() protoreflect.Message {
	mi := &file_service_grpc_proto_payload_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPersonalProto.ProtoReflect.Descriptor instead.
func (*UserPersonalProto) Descriptor() ([]byte, []int) {
	return file_service_grpc_proto_payload_proto_rawDescGZIP(), []int{13}
}

func (x *UserPersonalProto) GetFirstName() *wrapperspb.StringValue {
	if x != nil {
		return x.FirstName
	}
	return nil
}

func (x *UserPersonalProto) GetMiddleName() *wrapperspb.StringValue {
	if x != nil {
		return x.MiddleName
	}
	return nil
}

func (x *UserPersonalProto) GetLastName() *wrapperspb.StringValue {
	if x != nil {
		return x.LastName
	}
	return nil
}

func (x *UserPersonalProto) GetFullName() *wrapperspb.StringValue {
	if x != nil {
		return x.FullName
	}
	return nil
}

func (x *UserPersonalProto) GetSalutation() *wrapperspb.StringValue {
	if x != nil {
		return x.Salutation
	}
	return nil
}

func (x *UserPersonalProto) GetGender() *wrapperspb.StringValue {
	if x != nil {
		return x.Gender
	}
	return nil
}

type CompanyProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId           *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=_id,proto3" json:"_id,omitempty"`
	NoOfEmployees *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=no_of_employees,json=noOfEmployees,proto3" json:"no_of_employees,omitempty"`
	Website       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty"`
	AnnualRevenue *wrapperspb.Int64Value  `protobuf:"bytes,4,opt,name=annual_revenue,json=annualRevenue,proto3" json:"annual_revenue,omitempty"`
	Industry      *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=industry,proto3" json:"industry,omitempty"`
	Name          *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CompanyProto) Reset() {
	*x = CompanyProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_grpc_proto_payload_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyProto) ProtoMessage() {}

func (x *CompanyProto) ProtoReflect() protoreflect.Message {
	mi := &file_service_grpc_proto_payload_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyProto.ProtoReflect.Descriptor instead.
func (*CompanyProto) Descriptor() ([]byte, []int) {
	return file_service_grpc_proto_payload_proto_rawDescGZIP(), []int{14}
}

func (x *CompanyProto) GetXId() *wrapperspb.StringValue {
	if x != nil {
		return x.XId
	}
	return nil
}

func (x *CompanyProto) GetNoOfEmployees() *wrapperspb.StringValue {
	if x != nil {
		return x.NoOfEmployees
	}
	return nil
}

func (x *CompanyProto) GetWebsite() *wrapperspb.StringValue {
	if x != nil {
		return x.Website
	}
	return nil
}

func (x *CompanyProto) GetAnnualRevenue() *wrapperspb.Int64Value {
	if x != nil {
		return x.AnnualRevenue
	}
	return nil
}

func (x *CompanyProto) GetIndustry() *wrapperspb.StringValue {
	if x != nil {
		return x.Industry
	}
	return nil
}

func (x *CompanyProto) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

var File_service_grpc_proto_payload_proto protoreflect.FileDescriptor

var file_service_grpc_proto_payload_proto_rawDesc = []byte{
	0x0a, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x69, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xf7, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x69, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x31,
	0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x6f, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x30, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x22, 0xde, 0x06, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x2a, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12,
	0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x5f, 0x74, 0x61, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x65, 0x54, 0x61, 0x67, 0x12, 0x34, 0x0a, 0x06, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x34, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x38,
	0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x69, 0x6e, 0x69, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73,
	0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x33, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xda, 0x03, 0x0a, 0x0d, 0x4d, 0x69, 0x6e, 0x69, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2e, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x5f, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x70, 0x69, 0x63, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x3f, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xdb, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x36, 0x0a,
	0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2f, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x22, 0x3a,
	0x0a, 0x12, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x69, 0x6e, 0x69, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x5f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x17, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2c, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x0a, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x22, 0xb9, 0x01, 0x0a, 0x0a, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x22, 0x47, 0x0a, 0x10, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x50, 0x0a, 0x10, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3c, 0x0a,
	0x0c, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b,
	0x74, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf9, 0x02, 0x0a, 0x11,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x3b, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0xec, 0x02, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2e, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x5f, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x6e, 0x6f, 0x5f, 0x6f,
	0x66, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0d, 0x6e, 0x6f, 0x4f, 0x66, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61, 0x6e, 0x6e,
	0x75, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x69, 0x6e,
	0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75,
	0x73, 0x74, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x7c, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x43, 0x41, 0x4c,
	0x41, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x43, 0x41, 0x4c,
	0x41, 0x52, 0x10, 0x08, 0x2a, 0x88, 0x02, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45,
	0x4e, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x0f,
	0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x10, 0x09, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41,
	0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x41, 0x54, 0x45,
	0x57, 0x41, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x0b, 0x12, 0x0d, 0x0a,
	0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x0d, 0x2a,
	0x2e, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x2a,
	0x2c, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44, 0x56, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x2a, 0xc5, 0x32,
	0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x63, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x63, 0x72, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x63, 0x72, 0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x63, 0x72, 0x6d, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x63, 0x72, 0x6d, 0x5f, 0x63, 0x61,
	0x73, 0x65, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x06, 0x12,
	0x0b, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x33, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x72, 0x74, 0x66, 0x10, 0x0b, 0x12, 0x0d, 0x0a,
	0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c,
	0x68, 0x72, 0x6d, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x10, 0x0d, 0x12, 0x13,
	0x0a, 0x0f, 0x68, 0x72, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x68, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x72, 0x75,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x68, 0x72, 0x6d, 0x5f,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x72, 0x6d,
	0x73, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x10, 0x11, 0x12, 0x12, 0x0a, 0x0e, 0x72, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x10, 0x12, 0x12, 0x11, 0x0a, 0x0d, 0x72, 0x6d, 0x73, 0x5f, 0x64, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x13, 0x12, 0x0f, 0x0a, 0x0b, 0x72, 0x6d, 0x73,
	0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x72, 0x6d,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x15, 0x12, 0x13, 0x0a, 0x0f, 0x72,
	0x6d, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x10, 0x16,
	0x12, 0x10, 0x0a, 0x0c, 0x72, 0x6d, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x10, 0x17, 0x12, 0x0d, 0x0a, 0x09, 0x72, 0x6d, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x10,
	0x18, 0x12, 0x0f, 0x0a, 0x0b, 0x72, 0x6d, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x69, 0x6e, 0x67,
	0x10, 0x19, 0x12, 0x0f, 0x0a, 0x0b, 0x72, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x10, 0x1a, 0x12, 0x0d, 0x0a, 0x09, 0x72, 0x6d, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x10, 0x1b, 0x12, 0x18, 0x0a, 0x14, 0x72, 0x6d, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x1c, 0x12, 0x1b, 0x0a, 0x17,
	0x72, 0x6d, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x10, 0x1d, 0x12, 0x11, 0x0a, 0x0d, 0x72, 0x6d, 0x73,
	0x5f, 0x74, 0x6f, 0x64, 0x6f, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x10, 0x1e, 0x12, 0x1a, 0x0a, 0x16,
	0x72, 0x6d, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x67, 0x72,
	0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x1f, 0x12, 0x18, 0x0a, 0x14, 0x72, 0x6d, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x20, 0x12, 0x22, 0x0a, 0x1e, 0x72, 0x6d, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x21, 0x12, 0x14, 0x0a, 0x10, 0x72, 0x6d, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x64, 0x6f, 0x10, 0x22, 0x12, 0x19, 0x0a, 0x15,
	0x72, 0x6d, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x64, 0x6f,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x10, 0x23, 0x12, 0x17, 0x0a, 0x13, 0x72, 0x6d, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x10, 0x24,
	0x12, 0x13, 0x0a, 0x0f, 0x72, 0x6d, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x25, 0x12, 0x16, 0x0a, 0x12, 0x72, 0x6d, 0x73, 0x5f, 0x61, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x26, 0x12, 0x1a, 0x0a,
	0x16, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x27, 0x12, 0x1e, 0x0a, 0x1a, 0x73, 0x61, 0x6c,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x10, 0x28, 0x12, 0x1a, 0x0a, 0x16, 0x73, 0x61, 0x6c,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x10, 0x29, 0x12, 0x1c, 0x0a, 0x18, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e,
	0x67, 0x10, 0x2a, 0x12, 0x14, 0x0a, 0x10, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x2b, 0x12, 0x1b, 0x0a, 0x17, 0x73, 0x61, 0x6c,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x10, 0x2c, 0x12, 0x11, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x10, 0x2d, 0x12, 0x1b, 0x0a, 0x17, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x10, 0x2e, 0x12, 0x11, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x63, 0x73, 0x72, 0x66, 0x10, 0x2f, 0x12, 0x0f, 0x0a, 0x0b, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x10, 0x30, 0x12, 0x11, 0x0a, 0x0d, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x10, 0x31, 0x12, 0x1c, 0x0a,
	0x18, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x32, 0x12, 0x1b, 0x0a, 0x17, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x76,
	0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x10, 0x33, 0x12, 0x17, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x10,
	0x34, 0x12, 0x16, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x10, 0x35, 0x12, 0x19, 0x0a, 0x15, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x10, 0x36, 0x12, 0x1e, 0x0a, 0x1a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x10, 0x37, 0x12, 0x1e, 0x0a, 0x1a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x10, 0x38, 0x12, 0x1c, 0x0a, 0x18, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x10, 0x39, 0x12, 0x24, 0x0a, 0x20, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x10, 0x3a, 0x12, 0x19, 0x0a, 0x15, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x10, 0x3b, 0x12, 0x29, 0x0a, 0x25, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x3c, 0x12, 0x1c,
	0x0a, 0x18, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x3d, 0x12, 0x0c, 0x0a, 0x08,
	0x64, 0x6d, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x10, 0x3e, 0x12, 0x0e, 0x0a, 0x0a, 0x64, 0x6d,
	0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x3f, 0x12, 0x1b, 0x0a, 0x17, 0x64, 0x6d,
	0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x10, 0x40, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x6d, 0x73, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x10, 0x41, 0x12, 0x10, 0x0a, 0x0c, 0x64, 0x6d, 0x73, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x42, 0x12, 0x15, 0x0a, 0x11, 0x64, 0x6d, 0x73, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x10, 0x43, 0x12,
	0x0f, 0x0a, 0x0b, 0x64, 0x6d, 0x73, 0x5f, 0x64, 0x6f, 0x73, 0x73, 0x69, 0x65, 0x72, 0x10, 0x44,
	0x12, 0x16, 0x0a, 0x12, 0x64, 0x6d, 0x73, 0x5f, 0x64, 0x6f, 0x73, 0x73, 0x69, 0x65, 0x72, 0x5f,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x45, 0x12, 0x1e, 0x0a, 0x1a, 0x64, 0x6d, 0x73, 0x5f,
	0x64, 0x6f, 0x73, 0x73, 0x69, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x46, 0x12, 0x23, 0x0a, 0x1f, 0x64, 0x6d, 0x73, 0x5f,
	0x64, 0x6f, 0x73, 0x73, 0x69, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x47, 0x12, 0x14, 0x0a,
	0x10, 0x64, 0x6d, 0x73, 0x5f, 0x64, 0x6f, 0x73, 0x73, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x10, 0x48, 0x12, 0x1c, 0x0a, 0x18, 0x64, 0x6d, 0x73, 0x5f, 0x64, 0x6f, 0x73, 0x73, 0x69,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x10,
	0x49, 0x12, 0x2a, 0x0a, 0x26, 0x64, 0x6d, 0x73, 0x5f, 0x64, 0x6f, 0x73, 0x73, 0x69, 0x65, 0x72,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x4a, 0x12, 0x18, 0x0a,
	0x14, 0x64, 0x6d, 0x73, 0x5f, 0x64, 0x6f, 0x73, 0x73, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x10, 0x4b, 0x12, 0x21, 0x0a, 0x1d, 0x64, 0x6d, 0x73, 0x5f, 0x64,
	0x6f, 0x73, 0x73, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x4c, 0x12, 0x1e, 0x0a, 0x1a, 0x64, 0x6d,
	0x73, 0x5f, 0x64, 0x6f, 0x73, 0x73, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x4d, 0x12, 0x18, 0x0a, 0x14, 0x64, 0x6d,
	0x73, 0x5f, 0x64, 0x6f, 0x73, 0x73, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x10, 0x4e, 0x12, 0x16, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x67, 0x10, 0x4f, 0x12, 0x1f, 0x0a, 0x1b,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c,
	0x6f, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x10, 0x50, 0x12, 0x1a, 0x0a,
	0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62,
	0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x61, 0x67, 0x10, 0x51, 0x12, 0x1e, 0x0a, 0x1a, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x52, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x10, 0x53, 0x12, 0x1a, 0x0a, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x10, 0x54, 0x12, 0x17,
	0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x55, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x10, 0x56,
	0x12, 0x1e, 0x0a, 0x1a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x57,
	0x12, 0x16, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x10, 0x58, 0x12, 0x19, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x10, 0x59, 0x12, 0x16, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x10, 0x5a, 0x12, 0x16, 0x0a, 0x12, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x10, 0x5b, 0x12, 0x16, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x10, 0x5c, 0x12, 0x19, 0x0a, 0x15, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x5d, 0x12, 0x1a, 0x0a, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x10, 0x5e, 0x12, 0x15, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x10, 0x5f, 0x12, 0x1a, 0x0a, 0x16, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x10, 0x60, 0x12, 0x19, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x61,
	0x12, 0x1f, 0x0a, 0x1b, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10,
	0x63, 0x12, 0x1e, 0x0a, 0x1a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x10,
	0x64, 0x12, 0x1c, 0x0a, 0x18, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x10, 0x65, 0x12,
	0x20, 0x0a, 0x1c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x10,
	0x66, 0x12, 0x24, 0x0a, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x67, 0x12, 0x16, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x10, 0x68, 0x12,
	0x18, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x69, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x10, 0x6a, 0x12, 0x1b, 0x0a, 0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0x6b, 0x12,
	0x1c, 0x0a, 0x18, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x10, 0x6c, 0x12, 0x21, 0x0a,
	0x1d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x10, 0x6d,
	0x12, 0x16, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x10, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x10,
	0x6f, 0x12, 0x20, 0x0a, 0x1c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x10, 0x70, 0x12, 0x1b, 0x0a, 0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x10, 0x71,
	0x12, 0x1b, 0x0a, 0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x10, 0x72, 0x12, 0x24, 0x0a,
	0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x10, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x74,
	0x61, 0x67, 0x10, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x10, 0x75, 0x12, 0x1f, 0x0a, 0x1b,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x10, 0x76, 0x12, 0x16, 0x0a,
	0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x65, 0x77, 0x73, 0x10, 0x77, 0x12, 0x1f, 0x0a, 0x1b, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x10, 0x78, 0x12, 0x1a, 0x0a, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x5f, 0x74, 0x61, 0x67,
	0x10, 0x79, 0x12, 0x1a, 0x0a, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x10, 0x7a, 0x12, 0x1f,
	0x0a, 0x1b, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x10, 0x7b, 0x12,
	0x22, 0x0a, 0x1e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6c, 0x62, 0x75,
	0x6d, 0x10, 0x7c, 0x12, 0x1b, 0x0a, 0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x10, 0x7d,
	0x12, 0x17, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x10, 0x7e, 0x12, 0x18, 0x0a, 0x14, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x76, 0x70, 0x6f, 0x73,
	0x74, 0x10, 0x7f, 0x12, 0x1a, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x80, 0x01, 0x12,
	0x1e, 0x0a, 0x19, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x81, 0x01, 0x12,
	0x21, 0x0a, 0x1c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10,
	0x82, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x10, 0x83, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x84, 0x01, 0x12, 0x1b, 0x0a, 0x16,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x10, 0x85, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x10, 0x86, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x10, 0x87,
	0x01, 0x12, 0x0e, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x10, 0x88,
	0x01, 0x12, 0x15, 0x0a, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x10, 0x89, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x8a, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x8b, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x10, 0x8c, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x8d, 0x01, 0x12, 0x22, 0x0a, 0x1d,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x76, 0x65, 0x6e, 0x75, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x8e, 0x01,
	0x12, 0x1f, 0x0a, 0x1a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x8f,
	0x01, 0x12, 0x27, 0x0a, 0x22, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x90, 0x01, 0x12, 0x2d, 0x0a, 0x28, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x91, 0x01, 0x12, 0x2d, 0x0a, 0x28, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x92, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10,
	0x93, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0x94, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x75, 0x74, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x95, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x72, 0x6d, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x10, 0x96, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x6d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x97, 0x01,
	0x12, 0x11, 0x0a, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x98, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x99, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x73, 0x61, 0x6c,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x10, 0x9a, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x10, 0x9b, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x9c, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x10, 0x9d, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x10, 0x9e, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x10, 0x9f, 0x01, 0x12, 0x28, 0x0a,
	0x23, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x10, 0xa0, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x5f, 0x73, 0x6c, 0x69, 0x70, 0x10, 0xa1, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xa2, 0x01, 0x12, 0x1f, 0x0a,
	0x1a, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xa3, 0x01, 0x12, 0x1e,
	0x0a, 0x19, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0xa4, 0x01, 0x12, 0x1b,
	0x0a, 0x16, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x10, 0xa5, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x10, 0xa6, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x10, 0xa7, 0x01,
	0x12, 0x1e, 0x0a, 0x19, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0xa8, 0x01,
	0x12, 0x1a, 0x0a, 0x15, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x10, 0xa9, 0x01, 0x12, 0x1e, 0x0a, 0x19,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x10, 0xaa, 0x01, 0x12, 0x1d, 0x0a, 0x18,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xab, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x10, 0xac, 0x01,
	0x12, 0x16, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x10, 0xad, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x10, 0xae, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x10, 0xaf, 0x01, 0x12,
	0x1e, 0x0a, 0x19, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0xb0, 0x01, 0x12,
	0x23, 0x0a, 0x1e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x10, 0xb1, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x10, 0xb2, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x10, 0xb3, 0x01, 0x12,
	0x20, 0x0a, 0x1b, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x10, 0xb4,
	0x01, 0x12, 0x22, 0x0a, 0x1d, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x75, 0x62, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x10, 0xb5, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x10, 0xb6, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0xb7, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x10, 0xb8, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x10, 0xb9, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x10, 0xba, 0x01, 0x12,
	0x1b, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xbb, 0x01, 0x12, 0x16, 0x0a, 0x11,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x10, 0xbc, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x10, 0xbd, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x10, 0xbe, 0x01, 0x12, 0x20, 0x0a,
	0x1b, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x10, 0xbf, 0x01, 0x12,
	0x1f, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0xc0, 0x01,
	0x12, 0x29, 0x0a, 0x24, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x10, 0xc1, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x10, 0xc2, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x10, 0xc3, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x10, 0xc4, 0x01,
	0x12, 0x1b, 0x0a, 0x16, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x69,
	0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0xc5, 0x01, 0x12, 0x18, 0x0a,
	0x13, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x5f, 0x74, 0x61, 0x78, 0x10, 0xc6, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x10, 0xc7, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x10, 0xc8, 0x01, 0x12, 0x17, 0x0a,
	0x12, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x10, 0xc9, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x10, 0xca,
	0x01, 0x12, 0x1a, 0x0a, 0x15, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x10, 0xcb, 0x01, 0x12, 0x28, 0x0a,
	0x23, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0xcc, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x10, 0xcd, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x10,
	0xce, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x61, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0xcf, 0x01, 0x12,
	0x1a, 0x0a, 0x15, 0x61, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x10, 0xd0, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x61,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x10, 0xd1, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x61, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0xd2, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x10, 0xd3,
	0x01, 0x12, 0x1c, 0x0a, 0x17, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0xd4, 0x01, 0x12,
	0x14, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x10, 0xd5, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x10, 0xd6, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x10, 0xd7, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x61, 0x70,
	0x70, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x10, 0xd8, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x10, 0xd9, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x10, 0xda, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0xdb, 0x01, 0x12, 0x0a, 0x0a, 0x05,
	0x69, 0x6e, 0x62, 0x6f, 0x78, 0x10, 0xdc, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x64, 0x6d, 0x73, 0x5f,
	0x64, 0x6f, 0x73, 0x73, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x10, 0xdd,
	0x01, 0x12, 0x18, 0x0a, 0x13, 0x64, 0x6d, 0x73, 0x5f, 0x64, 0x6f, 0x73, 0x73, 0x69, 0x65, 0x72,
	0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x10, 0xde, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x10, 0xdf, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x10, 0xe0, 0x01, 0x12, 0x37, 0x0a, 0x32, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xe1, 0x01, 0x12,
	0x28, 0x0a, 0x23, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x10, 0xe2, 0x01, 0x12, 0x37, 0x0a, 0x32, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x5f, 0x75, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10,
	0xe3, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x10, 0xe4, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x10, 0xe5, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x72, 0x6d, 0x73, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x10,
	0xe6, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x72, 0x6d, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xe7, 0x01,
	0x12, 0x13, 0x0a, 0x0e, 0x72, 0x6d, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x10, 0xe8, 0x01, 0x42, 0x17, 0x5a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_grpc_proto_payload_proto_rawDescOnce sync.Once
	file_service_grpc_proto_payload_proto_rawDescData = file_service_grpc_proto_payload_proto_rawDesc
)

func file_service_grpc_proto_payload_proto_rawDescGZIP() []byte {
	file_service_grpc_proto_payload_proto_rawDescOnce.Do(func() {
		file_service_grpc_proto_payload_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_grpc_proto_payload_proto_rawDescData)
	})
	return file_service_grpc_proto_payload_proto_rawDescData
}

var file_service_grpc_proto_payload_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_service_grpc_proto_payload_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_service_grpc_proto_payload_proto_goTypes = []interface{}{
	(DataTypeEnum)(0),               // 0: payload.DataTypeEnum
	(StatusTypeProto)(0),            // 1: payload.StatusTypeProto
	(AccountTypeProto)(0),           // 2: payload.AccountTypeProto
	(SecurityTypeProto)(0),          // 3: payload.SecurityTypeProto
	(EntityProto)(0),                // 4: payload.EntityProto
	(*RequestPayloadProto)(nil),     // 5: payload.RequestPayloadProto
	(*ResponsePayloadProto)(nil),    // 6: payload.ResponsePayloadProto
	(*DataMeta)(nil),                // 7: payload.DataMeta
	(*DataType)(nil),                // 8: payload.DataType
	(*RequestContextProto)(nil),     // 9: payload.RequestContextProto
	(*MiniUserProto)(nil),           // 10: payload.MiniUserProto
	(*UserInfoProto)(nil),           // 11: payload.UserInfoProto
	(*TeamMiniAliasProto)(nil),      // 12: payload.TeamMiniAliasProto
	(*SharingRuleContextProto)(nil), // 13: payload.SharingRuleContextProto
	(*PhoneProto)(nil),              // 14: payload.PhoneProto
	(*EmailProto)(nil),              // 15: payload.EmailProto
	(*TeamActionsProto)(nil),        // 16: payload.TeamActionsProto
	(*UserActionsProto)(nil),        // 17: payload.UserActionsProto
	(*UserPersonalProto)(nil),       // 18: payload.UserPersonalProto
	(*CompanyProto)(nil),            // 19: payload.CompanyProto
	(*anypb.Any)(nil),               // 20: google.protobuf.Any
	(*wrapperspb.StringValue)(nil),  // 21: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),   // 22: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),   // 23: google.protobuf.Int64Value
}
var file_service_grpc_proto_payload_proto_depIdxs = []int32{
	9,  // 0: payload.RequestPayloadProto.request_context:type_name -> payload.RequestContextProto
	20, // 1: payload.RequestPayloadProto.data:type_name -> google.protobuf.Any
	1,  // 2: payload.ResponsePayloadProto.status_type:type_name -> payload.StatusTypeProto
	20, // 3: payload.ResponsePayloadProto.data:type_name -> google.protobuf.Any
	7,  // 4: payload.ResponsePayloadProto.data_meta:type_name -> payload.DataMeta
	8,  // 5: payload.DataMeta.type:type_name -> payload.DataType
	0,  // 6: payload.DataType.dataType:type_name -> payload.DataTypeEnum
	20, // 7: payload.DataType.typeMeta:type_name -> google.protobuf.Any
	10, // 8: payload.RequestContextProto.user:type_name -> payload.MiniUserProto
	21, // 9: payload.RequestContextProto.command:type_name -> google.protobuf.StringValue
	21, // 10: payload.RequestContextProto.e_tag:type_name -> google.protobuf.StringValue
	21, // 11: payload.RequestContextProto.entity:type_name -> google.protobuf.StringValue
	21, // 12: payload.RequestContextProto.module:type_name -> google.protobuf.StringValue
	11, // 13: payload.RequestContextProto.info:type_name -> payload.UserInfoProto
	21, // 14: payload.RequestContextProto.timezone:type_name -> google.protobuf.StringValue
	12, // 15: payload.RequestContextProto.teams:type_name -> payload.TeamMiniAliasProto
	13, // 16: payload.RequestContextProto.rules_context:type_name -> payload.SharingRuleContextProto
	17, // 17: payload.RequestContextProto.actions:type_name -> payload.UserActionsProto
	2,  // 18: payload.RequestContextProto.account_type:type_name -> payload.AccountTypeProto
	3,  // 19: payload.RequestContextProto.security_type:type_name -> payload.SecurityTypeProto
	21, // 20: payload.MiniUserProto._id:type_name -> google.protobuf.StringValue
	21, // 21: payload.MiniUserProto.first_name:type_name -> google.protobuf.StringValue
	21, // 22: payload.MiniUserProto.last_name:type_name -> google.protobuf.StringValue
	21, // 23: payload.MiniUserProto.userpic:type_name -> google.protobuf.StringValue
	21, // 24: payload.MiniUserProto.role_name:type_name -> google.protobuf.StringValue
	21, // 25: payload.MiniUserProto.title:type_name -> google.protobuf.StringValue
	21, // 26: payload.MiniUserProto.job_title:type_name -> google.protobuf.StringValue
	21, // 27: payload.MiniUserProto.company_name:type_name -> google.protobuf.StringValue
	15, // 28: payload.UserInfoProto.email:type_name -> payload.EmailProto
	14, // 29: payload.UserInfoProto.phone_number:type_name -> payload.PhoneProto
	18, // 30: payload.UserInfoProto.personal:type_name -> payload.UserPersonalProto
	19, // 31: payload.UserInfoProto.company:type_name -> payload.CompanyProto
	4,  // 32: payload.SharingRuleContextProto.entity:type_name -> payload.EntityProto
	21, // 33: payload.PhoneProto.phone_type:type_name -> google.protobuf.StringValue
	21, // 34: payload.PhoneProto.value:type_name -> google.protobuf.StringValue
	22, // 35: payload.PhoneProto.is_primary:type_name -> google.protobuf.Int32Value
	21, // 36: payload.EmailProto.email_type:type_name -> google.protobuf.StringValue
	21, // 37: payload.EmailProto.value:type_name -> google.protobuf.StringValue
	22, // 38: payload.EmailProto.is_primary:type_name -> google.protobuf.Int32Value
	16, // 39: payload.UserActionsProto.team_actions:type_name -> payload.TeamActionsProto
	21, // 40: payload.UserPersonalProto.first_name:type_name -> google.protobuf.StringValue
	21, // 41: payload.UserPersonalProto.middle_name:type_name -> google.protobuf.StringValue
	21, // 42: payload.UserPersonalProto.last_name:type_name -> google.protobuf.StringValue
	21, // 43: payload.UserPersonalProto.full_name:type_name -> google.protobuf.StringValue
	21, // 44: payload.UserPersonalProto.salutation:type_name -> google.protobuf.StringValue
	21, // 45: payload.UserPersonalProto.gender:type_name -> google.protobuf.StringValue
	21, // 46: payload.CompanyProto._id:type_name -> google.protobuf.StringValue
	21, // 47: payload.CompanyProto.no_of_employees:type_name -> google.protobuf.StringValue
	21, // 48: payload.CompanyProto.website:type_name -> google.protobuf.StringValue
	23, // 49: payload.CompanyProto.annual_revenue:type_name -> google.protobuf.Int64Value
	21, // 50: payload.CompanyProto.industry:type_name -> google.protobuf.StringValue
	21, // 51: payload.CompanyProto.name:type_name -> google.protobuf.StringValue
	52, // [52:52] is the sub-list for method output_type
	52, // [52:52] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_service_grpc_proto_payload_proto_init() }
func file_service_grpc_proto_payload_proto_init() {
	if File_service_grpc_proto_payload_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_grpc_proto_payload_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestPayloadProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_grpc_proto_payload_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePayloadProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_grpc_proto_payload_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_grpc_proto_payload_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_grpc_proto_payload_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestContextProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_grpc_proto_payload_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniUserProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_grpc_proto_payload_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_grpc_proto_payload_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamMiniAliasProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_grpc_proto_payload_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharingRuleContextProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_grpc_proto_payload_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhoneProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_grpc_proto_payload_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_grpc_proto_payload_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamActionsProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_grpc_proto_payload_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserActionsProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_grpc_proto_payload_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPersonalProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_grpc_proto_payload_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_grpc_proto_payload_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_service_grpc_proto_payload_proto_goTypes,
		DependencyIndexes: file_service_grpc_proto_payload_proto_depIdxs,
		EnumInfos:         file_service_grpc_proto_payload_proto_enumTypes,
		MessageInfos:      file_service_grpc_proto_payload_proto_msgTypes,
	}.Build()
	File_service_grpc_proto_payload_proto = out.File
	file_service_grpc_proto_payload_proto_rawDesc = nil
	file_service_grpc_proto_payload_proto_goTypes = nil
	file_service_grpc_proto_payload_proto_depIdxs = nil
}
