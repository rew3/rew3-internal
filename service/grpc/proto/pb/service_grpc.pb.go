// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: service/grpc/proto/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceProto_ExecuteRequest_FullMethodName = "/service.ServiceProto/ExecuteRequest"
)

// ServiceProtoClient is the client API for ServiceProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceProtoClient interface {
	ExecuteRequest(ctx context.Context, in *RequestPayloadProto, opts ...grpc.CallOption) (*ResponsePayloadProto, error)
}

type serviceProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceProtoClient(cc grpc.ClientConnInterface) ServiceProtoClient {
	return &serviceProtoClient{cc}
}

func (c *serviceProtoClient) ExecuteRequest(ctx context.Context, in *RequestPayloadProto, opts ...grpc.CallOption) (*ResponsePayloadProto, error) {
	out := new(ResponsePayloadProto)
	err := c.cc.Invoke(ctx, ServiceProto_ExecuteRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceProtoServer is the server API for ServiceProto service.
// All implementations must embed UnimplementedServiceProtoServer
// for forward compatibility
type ServiceProtoServer interface {
	ExecuteRequest(context.Context, *RequestPayloadProto) (*ResponsePayloadProto, error)
	mustEmbedUnimplementedServiceProtoServer()
}

// UnimplementedServiceProtoServer must be embedded to have forward compatible implementations.
type UnimplementedServiceProtoServer struct {
}

func (UnimplementedServiceProtoServer) ExecuteRequest(context.Context, *RequestPayloadProto) (*ResponsePayloadProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteRequest not implemented")
}
func (UnimplementedServiceProtoServer) mustEmbedUnimplementedServiceProtoServer() {}

// UnsafeServiceProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceProtoServer will
// result in compilation errors.
type UnsafeServiceProtoServer interface {
	mustEmbedUnimplementedServiceProtoServer()
}

func RegisterServiceProtoServer(s grpc.ServiceRegistrar, srv ServiceProtoServer) {
	s.RegisterService(&ServiceProto_ServiceDesc, srv)
}

func _ServiceProto_ExecuteRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPayloadProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProtoServer).ExecuteRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceProto_ExecuteRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProtoServer).ExecuteRequest(ctx, req.(*RequestPayloadProto))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceProto_ServiceDesc is the grpc.ServiceDesc for ServiceProto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceProto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.ServiceProto",
	HandlerType: (*ServiceProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteRequest",
			Handler:    _ServiceProto_ExecuteRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/grpc/proto/service.proto",
}
