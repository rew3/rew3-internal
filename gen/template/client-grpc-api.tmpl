package {{.PackageName}}

import (
	"context"

	"github.com/rew3/rew3-pkg/core/service/grpc/client"
	"github.com/rew3/rew3-pkg/core/service/grpc/payload"
	"github.com/rew3/rew3-pkg/core/service/shared/request"
)

/**
 * This is GRPC client code to be called by other service such as `api-gateway` and other microservice. 
 * Simply import this client code to required project and call the methods/APIs. 
 * 
 * THIS IS GENERATED CODES. 
 * DO NOT MODIFY. ANY CHANGES WILL BE REPLACED.
 * 
 * Version: {{ version }}
 * Generated Date: {{ currentDate }}
 */ 
{{ $entity := .Entity }}
// GRPC Client API for {{$entity}}
type {{$entity}}GrpcClient struct {
    Client *client.Client
}
{{ "" }}
{{- range .ServiceReadAPIs}}
/**
 * Client Read API: {{.APIName}}
 */
func (client *{{$entity}}GrpcClient) {{.MethodName}}(ctx context.Context, rCtx request.RequestContext, input interface{}) payload.ResponsePayload {
    jsonData, err := payload.ToJson[interface{}](input)
    if err != nil {
        return payload.InvalidRequestResponsePayload("{{.APIName}}", err.Error())
    }
    requestPayload := payload.RequestPayload{API: "{{.APIName}}", Context: rCtx, Data: jsonData}
    response := client.Client.ExecuteRequest(ctx, requestPayload)
    return response
}
{{ "" }}
{{- end }}

{{- range .ServiceWriteAPIs}}
/**
 * Client Write API: {{.APIName}}
 */
func (client *{{$entity}}GrpcClient) {{.MethodName}}(ctx context.Context, rCtx request.RequestContext, input interface{}) payload.ResponsePayload {
    jsonData, err := payload.ToJson[interface{}](input)
    if err != nil {
        return payload.InvalidRequestResponsePayload("{{.APIName}}", err.Error())
    }
    requestPayload := payload.RequestPayload{API: "{{.APIName}}", Context: rCtx, Data: jsonData}
    response := client.Client.ExecuteRequest(ctx, requestPayload)
    return response
}
{{ "" }}
{{- end }}

